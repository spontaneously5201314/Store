<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!--<import resource="applicationContext_*.xml"/>-->

    <context:component-scan base-package="com.spon.service" />

    <context:property-placeholder location="/WEB-INF/jdbc.properties"/>

    <!--配置数据源-->
    <!-- <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
    <!-- 数据库基本信息配置 -->
    <!--<property name="driverClassName" value="${driver}"/>
    <property name="url" value="${url}"/>
    <property name="username" value="root"/>
    <property name="password" value="root"/>-->
    <!-- 初始化连接数量 -->
    <!--<property name="initialSize" value="${druid.initialSize}"/>-->
    <!-- 最大并发连接数 -->
    <!--<property name="maxActive" value="${druid.maxActive}"/>-->
    <!-- 最大空闲连接数 -->
    <!--<property name="maxIdle" value="${druid.maxIdle}" />-->
    <!-- 最小空闲连接数 -->
    <!--<property name="minIdle" value="${druid.minIdle}"/>-->
    <!-- 配置获取连接等待超时的时间 -->
    <!--<property name="maxWait" value="${druid.maxWait}"/>-->
    <!-- 超过时间限制是否回收 -->
    <!--<property name="removeAbandoned" value="${druid.removeAbandoned}"/>-->
    <!-- 超过时间限制多长； -->
    <!--<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>-->
    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <!--<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>-->
    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <!--<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>-->
    <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
    <!--<property name="validationQuery" value="${druid.validationQuery}"/>-->
    <!-- 申请连接的时候检测 -->
    <!--<property name="testWhileIdle" value="${druid.testWhileIdle}"/>-->
    <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
    <!--<property name="testOnBorrow" value="${druid.testOnBorrow}"/>-->
    <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
    <!--<property name="testOnReturn" value="${druid.testOnReturn}"/>-->
    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <!--<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>-->
    <!--<property name="maxPoolPreparedStatementPerConnectionSize"
              value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>-->
    <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
            监控统计用的filter:stat
            日志用的filter:log4j
            防御SQL注入的filter:wall -->
    <!--<property name="filters" value="${druid.filters}" />   -->

    <!-- 解密密码必须要配置的项 config, stat启用监控过滤器-->
    <!--<property name="filters" value="${filters}"/>-->
    <!--<property name="connectionProperties" value="config.decrypt=true" />-->
    <!--</bean>-->

    <bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <!-- 这个conn 代理的作用就是，只有当确实有必要时，他它向DB发出查询。一切没有必要的 set autocommit=0 commit语句都不会发向数据库。-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource" ref="dbcpDataSource"/>
    </bean>

    <!--mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="/WEB-INF/mybatis/mybatis-config.xml"/>
    </bean>

    <!--配置mybatis session-->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <!--扫描basePackage包下面所有的mapper接口-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.spon.mapper"/>
    </bean>

    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--开启事务注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false"
                       rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="REQUIRED" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="pc" expression="execution(* com.spon..*(..))"/>
        <aop:advisor pointcut-ref="pc" advice-ref="txAdvice"/>
    </aop:config>


    <!--开启ehcache-->
    <cache:annotation-driven cache-manager="cacheManager"/>

    <bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="/WEB-INF/ehcache.xml"/>
    </bean>

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="cacheManagerFactory"/>
    </bean>

    <!-- 配置一个缓存拦截器对象，处理具体的缓存业务 -->
    <!--<bean id="methodCacheInterceptor" class="com.scxxs.ehcache.MethodCacheInterceptor">
        <property name="cache" ref="simpleCache"/>
    </bean>-->
</beans>